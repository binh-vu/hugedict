name: CI

on:
  push:
  pull_request:

jobs:
  build:
    strategy:
      matrix:
        platform: ["ubuntu-22.04"]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: |
            3.8
            3.9
            3.10
            3.11
      - name: Test
        run: |
          ls $RUNNER_TOOL_CACHE/Python/
          ls $RUNNER_TOOL_CACHE/Python/3.8.16/
          ls $RUNNER_TOOL_CACHE/Python/3.8.16/x64/
          which python
          $RUNNER_TOOL_CACHE/Python/3.8.16/x64/python --version
          echo "------"
          export PYTHON_HOMES=$RUNNER_TOOL_CACHE/Python
          export MINIMUM_PYTHON_VERSION=3.8
          echo $PYTHON_HOMES
          python .github/workflows/pydiscovery.py
          echo "PYIS=$(python .github/workflows/pydiscovery.py)"
          exit 1
          # >> "$GITHUB_ENV"
          # echo "PYIS=$RUNNER_TOOL_CACHE/Python/3.8.16/x64/bin/python $RUNNER_TOOL_CACHE/Python/3.9.16/x64/bin/python" >> "$GITHUB_ENV"
      # - name: Run test
      #   if: matrix.python == '3.8'
      #   run: cargo test --no-default-features --features pyo3/auto-initialize
      - uses: messense/maturin-action@v1
        env:
          MACOSX_DEPLOYMENT_TARGET: 10.14
        with:
          command: build
          args: >
            -o dist -i ${{ env.PYIS }}
            --release ${{ startsWith(matrix.platform, 'ubuntu') && startsWith(matrix.python, '3.8') && '--sdist' || '' }}
            ${{ startsWith(matrix.platform, 'macos') && '--target universal2-apple-darwin' || '' }}
      # - name: Run test
      #   if: matrix.python == '3.8' && !startsWith(matrix.platform, 'windows')
      #   run: |
      #     python -c "import subprocess, glob, os; file = glob.glob(os.path.join('dist', '*cp38*.whl'))[0]; subprocess.check_output(['pip', 'install', file])"
      #     pip install pytest
      #     mv hugedict hugedict2
      #     pytest -xs tests/
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  # build-manylinux:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Build wheels
  #       run: |
  #         docker run --rm -w /project -v $(pwd):/project \
  #           -e EXTRA_PATH=/opt/python/cp38-cp38/bin \
  #           -e PYTHON_HOMES=/opt/python \
  #           -e CARGO_NET_GIT_FETCH_WITH_CLI=false \
  #           quay.io/pypa/manylinux2014_x86_64:latest \
  #           bash /project/.github/workflows/build.sh -t x86_64-unknown-linux-gnu
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: wheels
  #         path: dist

  # release:
  #   name: Release PyPI.org
  #   runs-on: ubuntu-latest
  #   if: startsWith(github.ref, 'refs/tags/') || startsWith(github.ref, 'refs/heads/master') || startsWith(github.ref, 'refs/heads/dev-ci')
  #   needs: [build]
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: wheels
  #     - name: Publish to PyPI
  #       uses: messense/maturin-action@v1
  #       env:
  #         MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
  #       with:
  #         command: upload
  #         args: --skip-existing *
